!function(t){function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r){"use strict";function e(t){if("error"!==this.status){this.queue[this.queue.length]=t;var r=this.subscribers.length;try{for(var e=0;e<r;e++)this.subscribers[e](t)}catch(i){n.call(this,i)}}}function n(t){var r=this;"error"!==this.status&&(this.status="error",this.catchers.length>0?this.catchers[0](function(r){return r(t)}):(setTimeout(function(){r.caughtError&&console.error("Unhandle Typhooon error:",t)},0),this.caughtError=t))}function i(t,r,e){if(Array.isArray(t))for(var n=t.length,s=0;s<n;s++)i(t[s],r,e);else t.caughtError&&(r.caughtError=t.caughtError,t.caughtError=null,e(r.caughtError))}Object.defineProperty(r,"__esModule",{value:!0});var s=function o(t){if(!(this instanceof o))return new o(t);if(this.status="live",this.subscribers=[],this.catchers=[],this.queue=[],this.caughtError=null,this.remover=null,t&&"function"==typeof t)try{this.remover=t.call(this,e.bind(this),n.bind(this))}catch(r){n.call(this,r)}};s.prototype.push=function(t){e.call(this,t)},s.prototype.map=function(t){var r=this.subscribers,e=this.queue,n=this.caughtError,o=this;return s(function(s,u){var c=this;r.push(function(r){return s(t.call(c,r,e.length-1,c))});for(var h=e.length,a=0;a<h;a++)s(t.call(this,e[a],a,this));this.caughtError=n,i(o,this,u)})},s.prototype.then=function(t){return this.map(t)},s.prototype["catch"]=function(t){return this.catchers.push(t),t(this.caughtError),this.caughtError=null,this},s.prototype.filter=function(t){var r=this.subscribers,e=this.queue,n=this;return s(function(s,o){r.push(function(r){t.call(this,r)&&s(r)});for(var u=e.length,c=0;c<u;c++)t.call(this,e[c])&&s(e[c]);i(n,this,o)})},s.prototype.concat=function(t){var r=this;return s(function(e,n){var s=this;return r.subscribers.push(e),t.map(e),i([r,t],this,n),function(){r.remove(),s.remove()}})},s.prototype.reduce=function(t,r){var e=this.subscribers,n=this.queue,o=this;return s(function(s,u){s(n.reduce(t,r)),e.push(function(e){s(n.reduce(t,r))}),i(o,this,u)})},s.prototype.remove=function(t){return this.remover&&"function"==typeof this.remover&&this.remover(),this},s.all=function(t){var r=this;return s(function(e,n){for(var s=t.length,o=0;o<s;o++)t[o].map(e);return i(t.map(function(t){return t.caughtError}),r,n),function(){for(var r=0;r<s;r++)t[r]()}})},s.race=function(){},s.from=function(t){return s("undefined"!=typeof HTMLElement&&t instanceof HTMLElement?function(r,e){var n=new MutationObserver(function(t){t.forEach(function(t){r(t)})});n.observe(t,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}:t instanceof Promise?function(r,e){t.then(r)}:Array.isArray(t)?function(r,e){t.forEach(r)}:"function"==typeof t?t:function(r,e){r(t)})},r["default"]=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdHlwaG9vb24uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDk0YmI1NzBjNDdmYmQ3NzJjZDcyIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfbmV4dCIsInZhbCIsInRoaXMiLCJzdGF0dXMiLCJxdWV1ZSIsImxlbmd0aCIsInN1YnNjcmliZXJzIiwiaSIsImVyciIsIl9lcnJvciIsIl90aGlzMiIsImNhdGNoZXJzIiwiY2F0Iiwic2V0VGltZW91dCIsImNhdWdodEVycm9yIiwiY29uc29sZSIsImVycm9yIiwiZXJyb3JQcm9wb2dhdGlvbiIsInNvdXJjZXMiLCJ0YXJnZXQiLCJoYW5kbGVyIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIlN0cmVhbSIsImluaXRpYWxpemUiLCJyZW1vdmVyIiwiYmluZCIsInByb3RvdHlwZSIsInB1c2giLCJtYXAiLCJtYXBwZXIiLCJfdGhpcyIsIm5leHQiLCJfdGhpczMiLCJ0aGVuIiwidGhlbmVyIiwiY2F0Y2hlciIsImZpbHRlciIsInByZWRpY3RvciIsImNvbmNhdCIsInN0cmVhbSIsIl90aGlzNCIsInJlbW92ZSIsInJlZHVjZSIsInJlZHVjZXIiLCJpbml0VmFsdWUiLCJhbGwiLCJhcnIiLCJfdGhpczUiLCJyYWNlIiwiZnJvbSIsIkhUTUxFbGVtZW50Iiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwiZm9yRWFjaCIsIm11dGF0aW9uIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImF0dHJpYnV0ZXMiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsIlByb21pc2UiXSwi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aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBTdHJlYW0gPSBmdW5jdGlvbiBTdHJlYW0oaW5pdGlhbGl6ZSkge1xuXHQgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJlYW0pKSB7XG5cdCAgICByZXR1cm4gbmV3IFN0cmVhbShpbml0aWFsaXplKTtcblx0ICB9XG5cdCAgdGhpcy5zdGF0dXMgPSAnbGl2ZSc7IC8vICdsaXZlLCBlcnJvcidcblx0ICB0aGlzLnN1YnNjcmliZXJzID0gW107XG5cdCAgdGhpcy5jYXRjaGVycyA9IFtdO1xuXHRcblx0ICAvLyBGb3IgJ2hvdCcgb2JzZXJ2YWJsZVxuXHQgIHRoaXMucXVldWUgPSBbXTtcblx0ICB0aGlzLmNhdWdodEVycm9yID0gbnVsbDtcblx0ICB0aGlzLnJlbW92ZXIgPSBudWxsO1xuXHRcblx0ICBpZiAoaW5pdGlhbGl6ZSAmJiB0eXBlb2YgaW5pdGlhbGl6ZSA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgdHJ5IHtcblx0ICAgICAgdGhpcy5yZW1vdmVyID0gaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIF9uZXh0LmJpbmQodGhpcyksIF9lcnJvci5iaW5kKHRoaXMpKTtcblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICBfZXJyb3IuY2FsbCh0aGlzLCBlcnIpO1xuXHQgICAgfVxuXHQgIH1cblx0fTtcblx0XG5cdC8qXG5cdCAqIFByaXZhdGUgbWV0aG9kXG5cdCAqIFxuXHQgKi9cblx0XG5cdGZ1bmN0aW9uIF9uZXh0KHZhbCkge1xuXHQgIGlmICh0aGlzLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuXHQgICAgcmV0dXJuO1xuXHQgIH1cblx0ICB0aGlzLnF1ZXVlW3RoaXMucXVldWUubGVuZ3RoXSA9IHZhbDsgLy8gYXJyYXkucHVzaFxuXHQgIHZhciBsZW5ndGggPSB0aGlzLnN1YnNjcmliZXJzLmxlbmd0aDtcblx0XG5cdCAgdHJ5IHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdGhpcy5zdWJzY3JpYmVyc1tpXSh2YWwpO1xuXHQgICAgfVxuXHQgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgX2Vycm9yLmNhbGwodGhpcywgZXJyKTtcblx0ICB9XG5cdH1cblx0XG5cdGZ1bmN0aW9uIF9lcnJvcihlcnIpIHtcblx0ICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgaWYgKHRoaXMuc3RhdHVzID09PSAnZXJyb3InKSB7XG5cdCAgICByZXR1cm47XG5cdCAgfVxuXHQgIHRoaXMuc3RhdHVzID0gJ2Vycm9yJztcblx0ICBpZiAodGhpcy5jYXRjaGVycy5sZW5ndGggPiAwKSB7XG5cdCAgICAvLyBvbmx5IG9uZSBjYXRjaGVyIHdpbGwgY2F0Y2ggdGhlIGVycm9yXG5cdCAgICB0aGlzLmNhdGNoZXJzWzBdKGZ1bmN0aW9uIChjYXQpIHtcblx0ICAgICAgcmV0dXJuIGNhdChlcnIpO1xuXHQgICAgfSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICBpZiAoX3RoaXMyLmNhdWdodEVycm9yKSB7XG5cdCAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGUgVHlwaG9vb24gZXJyb3I6JywgZXJyKTtcblx0ICAgICAgfVxuXHQgICAgfSwgMCk7XG5cdCAgICB0aGlzLmNhdWdodEVycm9yID0gZXJyO1xuXHQgIH1cblx0fVxuXHRcblx0Lypcblx0ICogSW5zdGFuY2UgbWV0aG9kIChBcnJheSwgUHJvbWlzZSlcblx0ICogXG5cdCAqL1xuXHRcblx0U3RyZWFtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHZhbCkge1xuXHQgIF9uZXh0LmNhbGwodGhpcywgdmFsKTtcblx0fTtcblx0XG5cdFN0cmVhbS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuXHQgIHZhciBzdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnM7XG5cdCAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZTtcblx0ICB2YXIgY2F1Z2h0RXJyb3IgPSB0aGlzLmNhdWdodEVycm9yO1xuXHRcblx0ICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgIHJldHVybiBTdHJlYW0oZnVuY3Rpb24gKG5leHQsIGVycm9yKSB7XG5cdCAgICB2YXIgX3RoaXMzID0gdGhpcztcblx0XG5cdCAgICBzdWJzY3JpYmVycy5wdXNoKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgcmV0dXJuIG5leHQobWFwcGVyLmNhbGwoX3RoaXMzLCB2YWwsIHF1ZXVlLmxlbmd0aCAtIDEsIF90aGlzMykpO1xuXHQgICAgfSk7XG5cdCAgICB2YXIgbGVuZ3RoID0gcXVldWUubGVuZ3RoO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgbmV4dChtYXBwZXIuY2FsbCh0aGlzLCBxdWV1ZVtpXSwgaSwgdGhpcykpO1xuXHQgICAgfVxuXHQgICAgLy8gZXJyb3IgcHJvcG9nYXRpb25cblx0ICAgIHRoaXMuY2F1Z2h0RXJyb3IgPSBjYXVnaHRFcnJvcjtcblx0ICAgIGVycm9yUHJvcG9nYXRpb24oX3RoaXMsIHRoaXMsIGVycm9yKTtcblx0ICB9KTtcblx0fTtcblx0XG5cdFN0cmVhbS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uICh0aGVuZXIpIHtcblx0ICByZXR1cm4gdGhpcy5tYXAodGhlbmVyKTtcblx0fTtcblx0XG5cdFN0cmVhbS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiAoY2F0Y2hlcikge1xuXHQgIHRoaXMuY2F0Y2hlcnMucHVzaChjYXRjaGVyKTtcblx0ICBjYXRjaGVyKHRoaXMuY2F1Z2h0RXJyb3IpO1xuXHQgIHRoaXMuY2F1Z2h0RXJyb3IgPSBudWxsO1xuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0U3RyZWFtLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAocHJlZGljdG9yKSB7XG5cdCAgdmFyIHN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVycztcblx0ICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlO1xuXHRcblx0ICB2YXIgX3RoaXMgPSB0aGlzO1xuXHQgIHJldHVybiBTdHJlYW0oZnVuY3Rpb24gKG5leHQsIGVycm9yKSB7XG5cdCAgICBzdWJzY3JpYmVycy5wdXNoKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgaWYgKHByZWRpY3Rvci5jYWxsKHRoaXMsIHZhbCkpIHtcblx0ICAgICAgICBuZXh0KHZhbCk7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgICAgdmFyIGxlbmd0aCA9IHF1ZXVlLmxlbmd0aDtcblx0XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIGlmIChwcmVkaWN0b3IuY2FsbCh0aGlzLCBxdWV1ZVtpXSkpIHtcblx0ICAgICAgICBuZXh0KHF1ZXVlW2ldKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgZXJyb3JQcm9wb2dhdGlvbihfdGhpcywgdGhpcywgZXJyb3IpO1xuXHQgIH0pO1xuXHR9O1xuXHRcblx0Ly8gVE9ETzogYWxpZ24gd2l0aCBBcnJheSBjb25jYXRcblx0U3RyZWFtLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoc3RyZWFtKSB7XG5cdCAgdmFyIF90aGlzID0gdGhpcztcblx0ICByZXR1cm4gU3RyZWFtKGZ1bmN0aW9uIChuZXh0LCBlcnJvcikge1xuXHQgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cdFxuXHQgICAgX3RoaXMuc3Vic2NyaWJlcnMucHVzaChuZXh0KTtcblx0ICAgIHN0cmVhbS5tYXAobmV4dCk7XG5cdCAgICBlcnJvclByb3BvZ2F0aW9uKFtfdGhpcywgc3RyZWFtXSwgdGhpcywgZXJyb3IpO1xuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgX3RoaXMucmVtb3ZlKCk7XG5cdCAgICAgIF90aGlzNC5yZW1vdmUoKTtcblx0ICAgIH07XG5cdCAgfSk7XG5cdH07XG5cdFxuXHRTdHJlYW0ucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0VmFsdWUpIHtcblx0ICB2YXIgc3Vic2NyaWJlcnMgPSB0aGlzLnN1YnNjcmliZXJzO1xuXHQgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7XG5cdFxuXHQgIHZhciBfdGhpcyA9IHRoaXM7XG5cdCAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbiAobmV4dCwgZXJyb3IpIHtcblx0ICAgIG5leHQocXVldWUucmVkdWNlKHJlZHVjZXIsIGluaXRWYWx1ZSkpO1xuXHQgICAgc3Vic2NyaWJlcnMucHVzaChmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgIG5leHQocXVldWUucmVkdWNlKHJlZHVjZXIsIGluaXRWYWx1ZSkpO1xuXHQgICAgfSk7XG5cdCAgICBlcnJvclByb3BvZ2F0aW9uKF90aGlzLCB0aGlzLCBlcnJvcik7XG5cdCAgfSk7XG5cdH07XG5cdFxuXHQvLyBUT0RPOiBuZWVkZWQ/XG5cdFN0cmVhbS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKGNhdGNoZXIpIHtcblx0ICBpZiAodGhpcy5yZW1vdmVyICYmIHR5cGVvZiB0aGlzLnJlbW92ZXIgPT09ICdmdW5jdGlvbicpIHRoaXMucmVtb3ZlcigpO1xuXHQgIHJldHVybiB0aGlzO1xuXHR9O1xuXHRcblx0Lypcblx0ICogU3RhdGljIG1ldGhvZCAoUHJvbWlzZSlcblx0ICogXG5cdCAqL1xuXHRcblx0U3RyZWFtLmFsbCA9IGZ1bmN0aW9uIChhcnIpIHtcblx0ICB2YXIgX3RoaXM1ID0gdGhpcztcblx0XG5cdCAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbiAobmV4dCwgZXJyb3IpIHtcblx0ICAgIHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgYXJyW2ldLm1hcChuZXh0KTtcblx0ICAgIH1cblx0ICAgIGVycm9yUHJvcG9nYXRpb24oYXJyLm1hcChmdW5jdGlvbiAoc3RyZWFtKSB7XG5cdCAgICAgIHJldHVybiBzdHJlYW0uY2F1Z2h0RXJyb3I7XG5cdCAgICB9KSwgX3RoaXM1LCBlcnJvcik7XG5cdFxuXHQgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbmd0aDsgX2krKykge1xuXHQgICAgICAgIGFycltfaV0oKTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9KTtcblx0fTtcblx0XG5cdFN0cmVhbS5yYWNlID0gZnVuY3Rpb24gKCkge307XG5cdFxuXHRTdHJlYW0uZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcblx0ICAgIHJldHVybiBTdHJlYW0oZnVuY3Rpb24gKG5leHQsIGVycm9yKSB7XG5cdCAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcblx0ICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcblx0ICAgICAgICAgIG5leHQobXV0YXRpb24pO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0ICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh2YWx1ZSwge1xuXHQgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcblx0ICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuXHQgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG5cdCAgICAgICAgc3VidHJlZTogdHJ1ZVxuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXHQgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG5cdCAgICByZXR1cm4gU3RyZWFtKGZ1bmN0aW9uIChuZXh0LCBlcnJvcikge1xuXHQgICAgICB2YWx1ZS50aGVuKG5leHQpO1xuXHQgICAgfSk7XG5cdCAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHQgICAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbiAobmV4dCwgZXJyb3IpIHtcblx0ICAgICAgdmFsdWUuZm9yRWFjaChuZXh0KTtcblx0ICAgIH0pO1xuXHQgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICByZXR1cm4gU3RyZWFtKHZhbHVlKTtcblx0ICB9XG5cdCAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbiAobmV4dCwgZXJyb3IpIHtcblx0ICAgIG5leHQodmFsdWUpO1xuXHQgIH0pO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZXJyb3JQcm9wb2dhdGlvbihzb3VyY2VzLCB0YXJnZXQsIGhhbmRsZXIpIHtcblx0ICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2VzKSkge1xuXHQgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuXHRcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcblx0ICAgICAgZXJyb3JQcm9wb2dhdGlvbihzb3VyY2VzW2ldLCB0YXJnZXQsIGhhbmRsZXIpO1xuXHQgICAgfVxuXHQgIH0gZWxzZSB7XG5cdCAgICBpZiAoc291cmNlcy5jYXVnaHRFcnJvcikge1xuXHQgICAgICB0YXJnZXQuY2F1Z2h0RXJyb3IgPSBzb3VyY2VzLmNhdWdodEVycm9yO1xuXHQgICAgICBzb3VyY2VzLmNhdWdodEVycm9yID0gbnVsbDtcblx0ICAgICAgaGFuZGxlcih0YXJnZXQuY2F1Z2h0RXJyb3IpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU3RyZWFtO1xuXG4vKioqLyB9XG4vKioqKioqLyBdKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB0eXBob29vbi5qc1xuICoqLyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgOTRiYjU3MGM0N2ZiZDc3MmNkNzJcbiAqKi8iLCJcbmNvbnN0IFN0cmVhbSA9IGZ1bmN0aW9uKGluaXRpYWxpemUpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN0cmVhbSkpIHtcbiAgICByZXR1cm4gbmV3IFN0cmVhbShpbml0aWFsaXplKVxuICB9XG4gIHRoaXMuc3RhdHVzID0gJ2xpdmUnIC8vICdsaXZlLCBlcnJvcidcbiAgdGhpcy5zdWJzY3JpYmVycyA9IFtdXG4gIHRoaXMuY2F0Y2hlcnMgPSBbXVxuICBcbiAgLy8gRm9yICdob3QnIG9ic2VydmFibGVcbiAgdGhpcy5xdWV1ZSA9IFtdXG4gIHRoaXMuY2F1Z2h0RXJyb3IgPSBudWxsXG4gIHRoaXMucmVtb3ZlciA9IG51bGxcblxuICBpZiAoaW5pdGlhbGl6ZSAmJiB0eXBlb2YoaW5pdGlhbGl6ZSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5yZW1vdmVyID0gaW5pdGlhbGl6ZS5jYWxsKFxuICAgICAgICB0aGlzLFxuICAgICAgICBfbmV4dC5iaW5kKHRoaXMpLFxuICAgICAgICBfZXJyb3IuYmluZCh0aGlzKVxuICAgICAgKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2Vycm9yLmNhbGwodGhpcywgZXJyKVxuICAgIH1cbiAgfVxufVxuXG4vKlxuICogUHJpdmF0ZSBtZXRob2RcbiAqIFxuICovXG5cbmZ1bmN0aW9uIF9uZXh0KHZhbCkge1xuICBpZiAodGhpcy5zdGF0dXMgPT09ICdlcnJvcicpIHtcbiAgICByZXR1cm5cbiAgfVxuICB0aGlzLnF1ZXVlW3RoaXMucXVldWUubGVuZ3RoXSA9IHZhbCAvLyBhcnJheS5wdXNoXG4gIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzLnN1YnNjcmliZXJzXG4gIHRyeSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKyspIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnNbaV0odmFsKVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2Vycm9yLmNhbGwodGhpcywgZXJyKVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lcnJvcihlcnIpIHtcbiAgaWYgKHRoaXMuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5zdGF0dXMgPSAnZXJyb3InXG4gIGlmICh0aGlzLmNhdGNoZXJzLmxlbmd0aCA+IDApIHtcbiAgICAvLyBvbmx5IG9uZSBjYXRjaGVyIHdpbGwgY2F0Y2ggdGhlIGVycm9yXG4gICAgdGhpcy5jYXRjaGVyc1swXShjYXQgPT4gY2F0KGVycikpXG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5jYXVnaHRFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZSBUeXBob29vbiBlcnJvcjonLCBlcnIpXG4gICAgICB9XG4gICAgfSwgMClcbiAgICB0aGlzLmNhdWdodEVycm9yID0gZXJyXG4gIH1cbn1cblxuLypcbiAqIEluc3RhbmNlIG1ldGhvZCAoQXJyYXksIFByb21pc2UpXG4gKiBcbiAqL1xuXG5TdHJlYW0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbih2YWwpIHtcbiAgX25leHQuY2FsbCh0aGlzLCB2YWwpXG59XG5cblN0cmVhbS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24obWFwcGVyKSB7XG4gIGNvbnN0IHsgc3Vic2NyaWJlcnMsIHF1ZXVlLCBjYXVnaHRFcnJvciB9ID0gdGhpc1xuICBjb25zdCBfdGhpcyA9IHRoaXNcbiAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbihuZXh0LCBlcnJvcikge1xuICAgIHN1YnNjcmliZXJzLnB1c2godmFsID0+IG5leHQobWFwcGVyLmNhbGwodGhpcywgdmFsLCBxdWV1ZS5sZW5ndGggLSAxLCB0aGlzKSkpXG4gICAgY29uc3QgeyBsZW5ndGggfSA9IHF1ZXVlXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKyspIHtcbiAgICAgIG5leHQobWFwcGVyLmNhbGwodGhpcywgcXVldWVbaV0sIGksIHRoaXMpKVxuICAgIH1cbiAgICAvLyBlcnJvciBwcm9wb2dhdGlvblxuICAgIHRoaXMuY2F1Z2h0RXJyb3IgPSBjYXVnaHRFcnJvclxuICAgIGVycm9yUHJvcG9nYXRpb24oX3RoaXMsIHRoaXMsIGVycm9yKVxuICB9KVxufVxuXG5TdHJlYW0ucHJvdG90eXBlLnRoZW4gPSBmdW5jdGlvbih0aGVuZXIpIHtcbiAgcmV0dXJuIHRoaXMubWFwKHRoZW5lcilcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5jYXRjaCA9IGZ1bmN0aW9uKGNhdGNoZXIpIHtcbiAgdGhpcy5jYXRjaGVycy5wdXNoKGNhdGNoZXIpXG4gIGNhdGNoZXIodGhpcy5jYXVnaHRFcnJvcilcbiAgdGhpcy5jYXVnaHRFcnJvciA9IG51bGxcbiAgcmV0dXJuIHRoaXNcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbihwcmVkaWN0b3IpIHtcbiAgY29uc3QgeyBzdWJzY3JpYmVycywgcXVldWUgfSA9IHRoaXNcbiAgY29uc3QgX3RoaXMgPSB0aGlzXG4gIHJldHVybiBTdHJlYW0oZnVuY3Rpb24obmV4dCwgZXJyb3IpIHtcbiAgICBzdWJzY3JpYmVycy5wdXNoKGZ1bmN0aW9uKHZhbCkge1xuICAgICAgaWYgKHByZWRpY3Rvci5jYWxsKHRoaXMsIHZhbCkpIHtcbiAgICAgICAgbmV4dCh2YWwpXG4gICAgICB9XG4gICAgfSlcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gcXVldWVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKykge1xuICAgICAgaWYgKHByZWRpY3Rvci5jYWxsKHRoaXMsIHF1ZXVlW2ldKSkge1xuICAgICAgICBuZXh0KHF1ZXVlW2ldKVxuICAgICAgfVxuICAgIH1cbiAgICBlcnJvclByb3BvZ2F0aW9uKF90aGlzLCB0aGlzLCBlcnJvcilcbiAgfSlcbn1cblxuLy8gVE9ETzogYWxpZ24gd2l0aCBBcnJheSBjb25jYXRcblN0cmVhbS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gIGNvbnN0IF90aGlzID0gdGhpc1xuICByZXR1cm4gU3RyZWFtKGZ1bmN0aW9uKG5leHQsIGVycm9yKSB7XG4gICAgX3RoaXMuc3Vic2NyaWJlcnMucHVzaChuZXh0KVxuICAgIHN0cmVhbS5tYXAobmV4dClcbiAgICBlcnJvclByb3BvZ2F0aW9uKFtfdGhpcywgc3RyZWFtXSwgdGhpcywgZXJyb3IpXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIF90aGlzLnJlbW92ZSgpXG4gICAgICB0aGlzLnJlbW92ZSgpXG4gICAgfVxuICB9KVxufVxuXG5TdHJlYW0ucHJvdG90eXBlLnJlZHVjZSA9IGZ1bmN0aW9uKHJlZHVjZXIsIGluaXRWYWx1ZSkge1xuICBjb25zdCB7IHN1YnNjcmliZXJzLCBxdWV1ZSB9ID0gdGhpc1xuICBjb25zdCBfdGhpcyA9IHRoaXNcbiAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbihuZXh0LCBlcnJvcikge1xuICAgIG5leHQocXVldWUucmVkdWNlKHJlZHVjZXIsIGluaXRWYWx1ZSkpXG4gICAgc3Vic2NyaWJlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAgICAgIG5leHQocXVldWUucmVkdWNlKHJlZHVjZXIsIGluaXRWYWx1ZSkpXG4gICAgfSlcbiAgICBlcnJvclByb3BvZ2F0aW9uKF90aGlzLCB0aGlzLCBlcnJvcilcbiAgfSlcbn1cblxuLy8gVE9ETzogbmVlZGVkP1xuU3RyZWFtLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihjYXRjaGVyKSB7XG4gIGlmICh0aGlzLnJlbW92ZXIgJiYgdHlwZW9mKHRoaXMucmVtb3ZlcikgPT09ICdmdW5jdGlvbicpXG4gIHRoaXMucmVtb3ZlcigpXG4gIHJldHVybiB0aGlzXG59XG5cbi8qXG4gKiBTdGF0aWMgbWV0aG9kIChQcm9taXNlKVxuICogXG4gKi9cblxuU3RyZWFtLmFsbCA9IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gU3RyZWFtKChuZXh0LCBlcnJvcikgPT4ge1xuICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBhcnJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArKykge1xuICAgICAgYXJyW2ldLm1hcChuZXh0KVxuICAgIH1cbiAgICBlcnJvclByb3BvZ2F0aW9uKGFyci5tYXAoc3RyZWFtID0+IHN0cmVhbS5jYXVnaHRFcnJvciksIHRoaXMsIGVycm9yKVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKyspIHtcbiAgICAgICAgYXJyW2ldKClcbiAgICAgIH1cbiAgICB9XG4gIH0pXG59XG5cblN0cmVhbS5yYWNlID0gZnVuY3Rpb24oKSB7XG5cbn1cblxuU3RyZWFtLmZyb20gPSBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mKEhUTUxFbGVtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgIHJldHVybiBTdHJlYW0oZnVuY3Rpb24obmV4dCwgZXJyb3IpIHtcbiAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG11dGF0aW9uKSB7XG4gICAgICAgICAgbmV4dChtdXRhdGlvbilcbiAgICAgICAgfSkgICAgXG4gICAgICB9KVxuICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZSh2YWx1ZSwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgICB9KVxuICAgIH0pXG4gICAgXG4gIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgcmV0dXJuIFN0cmVhbShmdW5jdGlvbihuZXh0LCBlcnJvcikge1xuICAgICAgdmFsdWUudGhlbihuZXh0KVxuICAgIH0pXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gU3RyZWFtKGZ1bmN0aW9uKG5leHQsIGVycm9yKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKG5leHQpXG4gICAgfSlcbiAgfSBlbHNlIGlmICh0eXBlb2YodmFsdWUpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIFN0cmVhbSh2YWx1ZSlcbiAgfVxuICByZXR1cm4gU3RyZWFtKGZ1bmN0aW9uKG5leHQsIGVycm9yKSB7XG4gICAgbmV4dCh2YWx1ZSlcbiAgfSlcbn1cblxuZnVuY3Rpb24gZXJyb3JQcm9wb2dhdGlvbihzb3VyY2VzLCB0YXJnZXQsIGhhbmRsZXIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlcykpIHtcbiAgICBjb25zdCB7IGxlbmd0aCB9ID0gc291cmNlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrKSB7XG4gICAgICBlcnJvclByb3BvZ2F0aW9uKHNvdXJjZXNbaV0sIHRhcmdldCwgaGFuZGxlcilcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNvdXJjZXMuY2F1Z2h0RXJyb3IpIHtcbiAgICAgIHRhcmdldC5jYXVnaHRFcnJvciA9IHNvdXJjZXMuY2F1Z2h0RXJyb3JcbiAgICAgIHNvdXJjZXMuY2F1Z2h0RXJyb3IgPSBudWxsXG4gICAgICBoYW5kbGVyKHRhcmdldC5jYXVnaHRFcnJvcilcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RyZWFtXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9